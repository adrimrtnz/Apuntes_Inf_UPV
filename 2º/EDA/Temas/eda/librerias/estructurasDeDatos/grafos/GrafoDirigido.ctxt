#BlueJ class context
comment0.target=GrafoDirigido
comment0.text=\ \r\n\ \ Clase\ GrafoDirigido\r\n\ \ \r\n\ \ implementacion\ de\ un\ grafo\ Dirigido\ (Ponderado\ o\ no)\ \r\n\ \ mediante\ Listas\ de\ Adyacencia\r\n
comment1.params=numVertices
comment1.target=GrafoDirigido(int)
comment1.text=\ Construye\ un\ grafo\ Dirigido\ vacio\ con\ numVertices.\ \r\n\ \ @param\ numVertices\ \ Numero\ de\ vertices\ del\ grafo\ vacio\r\n
comment10.params=
comment10.target=int\ gradoSalida()
comment10.text=Ejemplo\ 2,\ pagina\ 12,\ tema\ 6
comment11.params=i
comment11.target=int\ gradoEntrada(int)
comment11.text=Ejemplo\ 3,\ pagina\ 12,\ tema\ 6
comment12.params=
comment12.target=int[]\ getArrayGradosEntrada()
comment12.text=Ejemplo\ 4,\ pagina\ 15,\ tema\ 6
comment13.params=
comment13.target=int\ gradoEntrada()
comment14.params=
comment14.target=int[]\ toArrayDFS()
comment14.text=paginas\ 29\ y\ 30,\ tema\ 6
comment15.params=v\ res
comment15.target=void\ toArrayDFS(int,\ int[])
comment16.params=
comment16.target=int[]\ toArrayBFS()
comment16.text=paginas\ 35\ y\ 36,\ tema\ 6
comment17.params=v\ res
comment17.target=void\ toArrayBFS(int,\ int[])
comment18.params=v
comment18.target=void\ caminosMinimosSinPesos(int)
comment19.params=v\ w
comment19.target=librerias.estructurasDeDatos.modelos.ListaConPI\ caminoMinimoSinPesos(int,\ int)
comment19.text=\ SII\ v\ \!\=\ w\ AND\ 0\ <\=\ v\ <\ numVertices()\ AND\ \ 0\ <\=\ w\ <\ numVertices()\ \r\n\ \ devuelve\ una\ ListaConPI\ con\ los\ v\u00C3\u00A9rtices\ del\ camino\ m\u00C3\u00ADnimo\ \r\n\ \ SIN\ pesos\ entre\ v\ y\ w,\ o\ una\ lista\ vac\u00C3\u00ADa\ si\ tal\ camino\ no\ existe\ \r\n
comment2.params=
comment2.target=int\ numVertices()
comment2.text=\r\n\ \ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\ \r\n\ \ @return\ \ int\ Numero\ de\ vertices\ de\ un\ grafo\r\n
comment20.params=w
comment20.target=librerias.estructurasDeDatos.modelos.ListaConPI\ decodificarCaminoHasta(int)
comment21.params=v\ w
comment21.target=librerias.estructurasDeDatos.modelos.ListaConPI\ caminoMinimo(int,\ int)
comment21.text=\ SII\ v\ \!\=\ w\ AND\ 0\ <\=\ v\ <\ numVertices()\ AND\ \ 0\ <\=\ w\ <\ numVertices()\ \r\n\ \ devuelve\ una\ ListaConPI\ con\ los\ v\u00C3\u00A9rtices\ del\ camino\ \r\n\ \ m\u00C3\u00ADnimo\ CON\ pesos\ entre\ v\ y\ w,\ o\ una\ lista\ vac\u00C3\u00ADa\ si\r\ntal\ camino\ no\ existe
comment22.params=u
comment22.target=void\ dijkstra(int)
comment23.params=
comment23.target=int[]\ ordenTopologicoDFS()
comment23.text=SII\ el\ Grafo\ es\ un\ DAG
comment24.params=v\ res
comment24.target=void\ ordenTopologicoDFS(int,\ int[])
comment25.params=
comment25.target=boolean\ hayCicloDFS()
comment25.text=pagina\ 64,\ tema\ 6
comment26.params=v
comment26.target=boolean\ hayAristaHADFS(int)
comment27.params=
comment27.target=int[]\ hayCicloyOrdenTopologicoDFS()
comment27.text=paginas\ 65\ y\ 66,\ tema\ 6
comment28.params=v\ res
comment28.target=boolean\ hayCicloyOrdenTopologicoDFS(int,\ int[])
comment3.params=
comment3.target=int\ numAristas()
comment3.text=\r\n\ \ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\r\n\ \ @return\ \ int\ Numero\ de\ aristas\ de\ un\ grafo\r\n
comment4.params=i
comment4.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment4.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ \r\n\ \ los\ adyacentes\ al\ vertice\ i\ de\ un\ grafo.\r\n\ \ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\r\n\ \ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\r\n
comment5.params=i\ j
comment5.target=boolean\ existeArista(int,\ int)
comment5.text=\ Comprueba\ si\ la\ arista\ (i,j)\ esta\ en\ un\ grafo.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @return\ boolean\ true\ si\ (i,j)\ esta\ y\ false\ en\ caso\ contrario\r\n
comment6.params=i\ j
comment6.target=double\ pesoArista(int,\ int)
comment6.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,j)\ de\ un\ grafo,\ \r\n\ \ 0\ si\ dicha\ arista\ no\ esta\ en\ el\ grafo.\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @return\ double\ Peso\ de\ la\ arista\ (i,j),\ 0\ si\ no\ existe.\r\n
comment7.params=i\ j
comment7.target=void\ insertarArista(int,\ int)
comment7.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ no\ Ponderado\ \r\n\ \ (al\ principio\ de\ la\ Lista\ de\ adyacentes\ a\ i).\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n
comment8.params=i\ j\ p
comment8.target=void\ insertarArista(int,\ int,\ double)
comment8.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado\ \r\n\ \ (al\ principio\ de\ la\ Lista\ de\ adyacentes\ a\ i).\r\n\ \ @param\ i\ \ \ \ Vertice\ origen\r\n\ \ @param\ j\ \ \ \ Vertice\ destino\r\n\ \ @param\ p\ \ \ \ Peso\ de\ (i,\ j)\r\n
comment9.params=i
comment9.target=int\ gradoSalida(int)
comment9.text=Ejemplo\ 1,\ pagina\ 12,\ tema\ 6
numComments=29
