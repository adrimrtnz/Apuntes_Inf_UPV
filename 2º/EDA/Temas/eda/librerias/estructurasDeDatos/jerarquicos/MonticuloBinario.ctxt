#BlueJ class context
comment0.target=MonticuloBinario
comment1.params=
comment1.target=MonticuloBinario()
comment1.text=crea\ un\ Heap\ vacio
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ obtiene\ un\ String\ con\ los\ datos\ de\ una\ CP\ ordenados\ Por\ Niveles\ \r\n\ \ y\ con\ el\ formato\ que\ se\ usa\ en\ el\ estandar\ de\ Java\ (entre\ corchetes\r\n\ \ cuadrados\ y\ separando\ cada\ elemento\ del\ anterior\ mediante\ una\ coma\ \r\n\ \ seguida\ de\ un\ espacio\ en\ blanco);\ si\ la\ CP\ esta\ vacia\ el\ String\ \r\n\ \ resultado\ es\ []\r\n
comment11.params=
comment11.target=int\ contarHojas()
comment11.text=devuelve\ el\ numero\ de\ hojas\ de\ un\ Heap\ en\ Theta(1)
comment12.params=
comment12.target=java.lang.Comparable\ recuperarMax()
comment12.text=devuelve\ el\ maximo\ de\ un\ Heap\ tras\ talla/2\ compareTo
comment13.params=e
comment13.target=void\ introducir(java.lang.Comparable)
comment14.params=
comment14.target=void\ arreglar()
comment15.params=i
comment15.target=void\ arreglar(int)
comment16.params=
comment16.target=void\ arreglarIterativo()
comment16.text=Restablece\ la\ propiedad\ de\ orden\ de\ un\ Heap
comment17.params=e
comment17.target=boolean\ hayMenoresQue(java.lang.Comparable)
comment17.text=\r\n\ Ejercicio\ 5\:\ Implementar\ un\ m\u00E9todo\ de\ instancia,\ hayMenoresQue\ que,\r\n\ en\ tiempo\ constante,\ compruebe\ si\ existen\ elementos\ menores\ que\ e\r\n\ en\ el\ mont\u00EDculo.\r\n
comment18.params=e
comment18.target=boolean\ hayMayoresQue(java.lang.Comparable)
comment18.text=\r\n\ Ejercicio\ 6\:\ Implementar\ un\ m\u00E9todo\ de\ instancia\ hayMayoresQue,\ que\r\n\ comprueba\ si\ existen\ elementos\ mayores\ que\ e\ en\ el\ mont\u00EDculo.\r\n
comment19.params=e
comment19.target=boolean\ estaEn(java.lang.Comparable)
comment19.text=\r\n\ Ejercicio\ 7\:\ Implementar\ un\ m\u00E9todo\ de\ instancia,\ estaEn\ que\ compruebe\r\n\ si\ el\ elemento\ e\ est\u00E1\ en\ el\ mont\u00EDculo\r\n
comment2.params=n
comment2.target=MonticuloBinario(int)
comment2.text=crea\ una\ Cola\ de\ Prioridad\ (CP)\ vacia\ con\ capacidad\ inicial\ n
comment20.params=e\ i
comment20.target=boolean\ estaEn(java.lang.Comparable,\ int)
comment21.params=x\ y
comment21.target=void\ borrarHojasEnRango(java.lang.Comparable,\ java.lang.Comparable)
comment21.text=\r\n\ Ejercicio\ 8\:\ Implementar\ un\ m\u00E9todo\ de\ instancia,\ borrarHojasEnRango\r\n\ que\ borre\ hojas\ del\ mont\u00EDculo\ que\ est\u00E1n\ dentro\ del\ rango\ gen\u00E9rico\r\n\ y\ no\ vac\u00EDo.\r\n
comment22.params=k
comment22.target=java.lang.Comparable\ eliminar(int)
comment22.text=\r\n\ Ejercicio\ 9\:\r\n
comment23.params=
comment23.target=int\ igualesAlMinimo()
comment23.text=\r\n\ Ejercicio\ 10\:\r\n
comment24.params=i
comment24.target=int\ igualesAlMinimo(int)
comment25.params=v
comment25.target=boolean\ esHeap(java.lang.Comparable[])
comment25.text=\r\n\ Ejercicio\ 11\:\ Dise\u00F1ar\ un\ m\u00E9todo\ (est\u00E1tico)\ esHeap\ que\ con\ el\ menor\ coste\r\n\ posible,\ compruebe\ si\ un\ array\ v\ es\ un\ Heap\r\n
comment26.params=e
comment26.target=int\ menoresQue(java.lang.Comparable)
comment26.text=\r\n\ Ejercicio\ 12\:\r\n
comment27.params=e\ i
comment27.target=int\ menoresQue(java.lang.Comparable,\ int)
comment28.params=
comment28.target=java.lang.Comparable\ eliminar1aHoja()
comment28.text=\r\n\ Ejercicio\ 13\:\r\n
comment29.params=v
comment29.target=void\ heapSort(java.lang.Comparable[])
comment29.text=\r\n\ Ejercicio\ 14\:\ Dise\u00F1ar\ un\ m\u00E9todo\ est\u00E1tico,\ gen\u00E9rico\ e\ \r\n\ iterativo\ heapSort\ que\ ordene\ ascendentemente\ un\ array\ v\r\n\ usando\ un\ mont\u00EDculo\ (diferente\ a\ cPSort()\r\n
comment3.params=
comment3.target=boolean\ esVacia()
comment3.text=comprueba\ si\ un\ Heap\ es\ vacio\ en\ Theta(1)
comment4.params=
comment4.target=java.lang.Comparable\ recuperarMin()
comment4.text=devuelve\ el\ minimo\ de\ un\ Heap\ en\ Theta(1)
comment5.params=e
comment5.target=void\ insertar(java.lang.Comparable)
comment5.text=inserta\ e\ en\ un\ Heap
comment6.params=e\ posIns
comment6.target=int\ reflotar(java.lang.Comparable,\ int)
comment7.params=
comment7.target=void\ duplicarArray()
comment8.params=
comment8.target=java.lang.Comparable\ eliminarMin()
comment8.text=recupera\ y\ elimina\ el\ minimo\ de\ un\ Heap
comment9.params=pos
comment9.target=void\ hundir(int)
numComments=30
